```C++
#include <iostream>
#include <thread>
#include <chrono>
#include <atomic>
#include <mutex>
#include <cstdlib>
#include <conio.h> 

using namespace std;

class Sensor {
public:
    virtual bool isTriggered() const = 0;
};

class FillSensor : public Sensor {
    atomic<bool> filled;
public:
    FillSensor() : filled(false) {}
    void setFilled(bool value) { filled = value; }
    virtual bool isTriggered() const override { return filled; }
};

class PrintSensor : public Sensor {
    atomic<bool> triggered;
public:
    PrintSensor() : triggered(false) {}
    void trigger() { triggered = true; }
    void reset() { triggered = false; }
    virtual bool isTriggered() const override { return triggered; }
};

class Container {
    atomic<int> count;
public:
    Container(int initialCount) : count(initialCount) {}
    int getCount() const { return count; }
    void decreaseCount() { count--; }
};

class ConveyorBelt {
    atomic<bool> running;
    FillSensor& fillSensor;
    Container& primaryContainer;
    Container* secondaryContainer;
    PrintSensor& printSensor;
    string name;
    mutex mtx;

public:

    ConveyorBelt(const string& n, FillSensor& fs, Container& pc, PrintSensor& ps, Container* sc = nullptr) :
        name(n), fillSensor(fs), primaryContainer(pc), secondaryContainer(sc), printSensor(ps) {
        running = false;
    }

    void start() {
        setlocale(LC_ALL, "Russian");
        running = true;
        cout << "Конвейерная лента " << name << " запущена." << endl;
        cout << "Крышки контейнеров с заготовками открыты " << endl;
    }

    void stop() {
        setlocale(LC_ALL, "Russian");
        running = false;
        cout << "Конвейерная лента " << name << " остановлена." << endl;
        cout << "Крышки контейнеров с заготовками закрыты " << endl;
    }

    void processItem() {
        setlocale(LC_ALL, "Russian");
        mtx.lock();
        system("cls");
        cout << "Заготовка на конвейере " << name << " проходит станок печати..." << endl;
        this_thread::sleep_for(chrono::seconds(4));
        cout << "Печать заготовки на конвейере " << name << " завершена." << endl;

        if (primaryContainer.getCount() > 0) {
            primaryContainer.decreaseCount();
        }
        else if (secondaryContainer && secondaryContainer->getCount() > 0) {
            secondaryContainer->decreaseCount();
        }

        int totalCount = primaryContainer.getCount() + (secondaryContainer ? secondaryContainer->getCount() : 0);
        cout << "Осталось заготовок в контейнерах: " << totalCount << endl;

        printSensor.reset();
        mtx.unlock();
    }


    void run() {
        setlocale(LC_ALL, "Russian");
        while (running) {
            cout << "Заготовка движется по конвейеру " << name << "..." << endl;
            this_thread::sleep_for(chrono::seconds(1));

            int totalCount = primaryContainer.getCount() + (secondaryContainer ? secondaryContainer->getCount() : 0);
            if (totalCount == 0) {
                cout << "Все контейнеры пусты." << endl;
                stop();
                break;
            }

            if (!printSensor.isTriggered() && totalCount > 0) {
                printSensor.trigger();
                processItem();
                if (primaryContainer.getCount() > 0) {
                    primaryContainer.decreaseCount();
                }
                else if (secondaryContainer && secondaryContainer->getCount() > 0) {
                    secondaryContainer->decreaseCount();
                }
                cout << "Заготовка достигла финального контейнера." << endl;
            }


            if (_kbhit()) {
                char input = _getch();
                if (input == 'e' || input == 'E') {
                    if (running) {
                        stop();
                    }
                    else {
                        start();
                    }
                }
            }
        }
    }
};

int main() {
    setlocale(LC_ALL, "Russian");
    FillSensor fillSensor1, fillSensor2;
    PrintSensor printSensor1, printSensor2;
    Container container1(5), container2(5), container3(2);

    ConveyorBelt conveyor1("A", fillSensor1, container1, printSensor1, &container3);
    ConveyorBelt conveyor2("B", fillSensor2, container2, printSensor2, &container3);

    char input;
    cout << "=========================================================" << endl;
    cout << "|  Нажмите 's' для запуска процесса или 'q' для выхода: |" << endl;
    cout << "=========================================================" << endl;
    cout << "Инструкция по эксплуатации:Нажмите клавишу s для запуска программы, для экстренной остановки нажмите клавишу e" << endl;


    cin >> input;

    if (input == 's') {
        conveyor1.start();
        conveyor2.start();

        thread t1(&ConveyorBelt::run, &conveyor1);
        thread t2(&ConveyorBelt::run, &conveyor2);

        t1.join();
        t2.join();

        cout << "Процесс завершен." << endl;
        system("cls");
        cout << "Для повторного запуска конвейера:" << endl;
;
    }
    else {
        cout << "Процесс не запущен." << endl;
    }
    main();

    return 0;
}
```
